// Code generated by MockGen. DO NOT EDIT.
// Source: application/movie/application.go

// Package movie is a generated GoMock package.
package movie

import (
	movie "backend-go-recruitment/common/movie"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMovieApplication is a mock of MovieApplication interface
type MockMovieApplication struct {
	ctrl     *gomock.Controller
	recorder *MockMovieApplicationMockRecorder
}

// MockMovieApplicationMockRecorder is the mock recorder for MockMovieApplication
type MockMovieApplicationMockRecorder struct {
	mock *MockMovieApplication
}

// NewMockMovieApplication creates a new mock instance
func NewMockMovieApplication(ctrl *gomock.Controller) *MockMovieApplication {
	mock := &MockMovieApplication{ctrl: ctrl}
	mock.recorder = &MockMovieApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieApplication) EXPECT() *MockMovieApplicationMockRecorder {
	return m.recorder
}

// FindMovieByKeyword mocks base method
func (m *MockMovieApplication) FindMovieByKeyword(keyword, pagination string) (*movie.MovieList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMovieByKeyword", keyword, pagination)
	ret0, _ := ret[0].(*movie.MovieList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMovieByKeyword indicates an expected call of FindMovieByKeyword
func (mr *MockMovieApplicationMockRecorder) FindMovieByKeyword(keyword, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMovieByKeyword", reflect.TypeOf((*MockMovieApplication)(nil).FindMovieByKeyword), keyword, pagination)
}

// FindMovieByImdbID mocks base method
func (m *MockMovieApplication) FindMovieByImdbID(imdbID string) (*movie.MovieDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMovieByImdbID", imdbID)
	ret0, _ := ret[0].(*movie.MovieDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMovieByImdbID indicates an expected call of FindMovieByImdbID
func (mr *MockMovieApplicationMockRecorder) FindMovieByImdbID(imdbID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMovieByImdbID", reflect.TypeOf((*MockMovieApplication)(nil).FindMovieByImdbID), imdbID)
}

// InsertLogs mocks base method
func (m *MockMovieApplication) InsertLogs(keyword, pagination string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLogs", keyword, pagination)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLogs indicates an expected call of InsertLogs
func (mr *MockMovieApplicationMockRecorder) InsertLogs(keyword, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLogs", reflect.TypeOf((*MockMovieApplication)(nil).InsertLogs), keyword, pagination)
}
