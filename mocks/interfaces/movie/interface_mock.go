// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/movie/interface.go

// Package movie is a generated GoMock package.
package movie

import (
	movie "backend-go-recruitment/common/movie"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMovieInterface is a mock of MovieInterface interface
type MockMovieInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMovieInterfaceMockRecorder
}

// MockMovieInterfaceMockRecorder is the mock recorder for MockMovieInterface
type MockMovieInterfaceMockRecorder struct {
	mock *MockMovieInterface
}

// NewMockMovieInterface creates a new mock instance
func NewMockMovieInterface(ctrl *gomock.Controller) *MockMovieInterface {
	mock := &MockMovieInterface{ctrl: ctrl}
	mock.recorder = &MockMovieInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieInterface) EXPECT() *MockMovieInterfaceMockRecorder {
	return m.recorder
}

// FindMovieByKeyword mocks base method
func (m *MockMovieInterface) FindMovieByKeyword(keyword, pagination string) (*movie.MovieList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMovieByKeyword", keyword, pagination)
	ret0, _ := ret[0].(*movie.MovieList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMovieByKeyword indicates an expected call of FindMovieByKeyword
func (mr *MockMovieInterfaceMockRecorder) FindMovieByKeyword(keyword, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMovieByKeyword", reflect.TypeOf((*MockMovieInterface)(nil).FindMovieByKeyword), keyword, pagination)
}
